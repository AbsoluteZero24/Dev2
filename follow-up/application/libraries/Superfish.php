<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');/** * PHP superfish  * * A Codeigniter library that creates a superfish menu automatically with just few lines of code. * * Copyright (C) 2013  E.z  * * LICENSE * * Superfish is released with dual licensing, using the GPL v3 (license-gpl3.txt) and the MIT license (license-mit.txt). * You don't have to do anything special to choose one license or the other and you don't have to notify anyone which license you are using. * Please see the corresponding license file for details of these licenses. * You are free to use, modify and distribute this software, but all copyright information must remain. * * @package    	PHP Superfish * @copyright  	Copyright (c) 2013, E.z * @license    	As Above * @version    	1.0 * @author     	E.z <ezgoen@gmail.com> */ /** *	Credits to  *				Joel Birch - the creator of the jquery plugin SuperFish * *					http://users.tpg.com.au/j_birch/plugins/superfish/ *					http://archive.plugins.jquery.com/project/Superfish *					https://github.com/joeldbirch/superfish/ *  			 *				 *				Patrick Fitzgerald - the creater of csscolor.php * *					http://www.barelyfitz.com/projects/csscolor/ *	 *  Superfish jQuery plugin : * *	Download the latest version if the jquery plugin SuperFish from git * *	https://github.com/joeldbirch/superfish/archive/master.zip *	 *	extract it to assets/superfish *	when your done you should have  *	assets/superfish/ *		changelog.txt *		example.html *		followed.html *		MIT-LICENSE.txt *		README.md *		superfish.jquery.json *		 *	assets/superfish/css/ *		superfish.css *		superfish-navbar.css *		superfish-vertical.css *		 *	assets/superfish/images/ *		arrows-ffffff.png *		 *	assets/superfish/js/ *		hoverIntent.js *		jquery-1.9.0.min.js  *		superfish.js *		supersubs.js * *   *	csscolors.php colors library: *  *  You can download the latest version and remove the pear dependancies yourself *  or you can use the included version which has all pear dependancies removed *	 *  to install it by creating assets/superfish/theme/ *  and placing csscolor.php into there along with superfish_css.php *	so when your done you'll have: *  		 *	assets/superfish/theme/ *		csscolor.php *		superfish_css.php * *	to reduce processing superfish_css.php will cache copies if its css  *	and output that rather than computing a new theme. * */					class Superfish {	private $menu_data=null;	private $active_path=array();	private $tmp_build='';		protected $default_assets_path					= 'assets/superfish';	protected $default_javascript_path				= null;	protected $default_css_path						= null;	protected $default_theme_path					= null;	protected $inline_css='';	protected $inline_js='';		protected $container_tag = 'ul'; 			 // the html tag for the container of a set of menu items	protected $container_tag_attrs = ''; 		 // html attributes for the container tag	protected $container_tag_id = ''; 			 // html container id	protected $container_tag_class = 'sf-menu';  // html container class one of or any combination sf-menu, sf-navbar, sf-vertical 												 // see the superfish docs for these												 			// The color scheme - these values will be the basis for generating a color scheme	// They are the values that will bootstrap csscolor.php	    protected $background_color='FFD833'; 				 //Background color The Menu	protected $highlight_color='FFCC00'; 				 //Hightlight Color for the Menu						protected $text_color='670001'; 				 	 //Text color for the menu	function __construct($params = array())	{		$CI =& get_instance();		$CI->load->helper('url');		foreach ($params as $key => $val)		{			if (isset($this->$key)) {				$this->$key = $val;			}		}		$this->init_superfish($params);	}		/**	 * init_superfish	 *	 * Sets everything up	 *	 * @arrgs	array  = any defaults you want superfish to know about 	 *					 will silently ignore anything it doesnt know about	 *	 * @package    	PHP Superfish	 * @copyright  	Copyright (c) 2013, E.z	 * @author     	E.z <ezgoen@gmail.com>	 *	 */	private function init_superfish($params=array()){		$this->default_assets_path					= $this->default_assets_path;		$this->default_javascript_path				= $this->default_assets_path.'/js';		$this->default_css_path						= $this->default_assets_path.'/css';		$this->default_theme_path					= $this->default_assets_path.'/theme';						$this->menu_data=(object) array('build'=>array(),		//this where we put it together and ready for render - not needed after render																//full paths to all needed files - us these in your template																//inline is will be any inline js and/or css blocks										'includes'=> (object) array('js_files'=>array(), 																	'css_files'=>array(),																	'inline'=>''),																											'output'=>Null);				$css_theme_args ="?b=".$this->background_color;		$css_theme_args.="&amp;h=".$this->highlight_color;		$css_theme_args.="&amp;c=".$this->text_color;				//$this->set_css($this->default_css_path	.'/megafish.css');		if (strpos($this->container_tag_class,'sf-navbar') !==False){			$this->set_css($this->default_css_path	.'/superfish-navbar.css');		}		if (strpos($this->container_tag_class,'sf-vertical') !==False){			$this->set_css($this->default_css_path	.'/superfish-vertical.css');		}		$this->set_css($this->default_theme_path.'/superfish_css.php'.$css_theme_args);				$this->set_js('assets/superfish/js/superfish.js');		$this->set_js('assets/superfish/js/supersubs.js');		$this->set_js('assets/superfish/js/jquery.hoverIntent.js');		if (trim($this->container_tag)==''){			$this->container_tag="ul";		}		if (trim($this->container_tag_class)==''){			$this->container_tag_class="sf-menu";		}		if (!isset($args['pathClass'])){			$params['pathClass']='current';		}				$this->set_fish_args($params);	}		/**	 * set_fish_args	 *	 * Sets the jquery args for the superfish jquery plugin	 * only uses array keys that superfish knows about	 * silently ignores averything else.	 *	 * @access	public	 * @param	array	 * @return	The javascript jQuery(document).ready(function)	 *          that superfish expects - this should be includes inline in your html output	 *	 * @package    	PHP Superfish	 * @copyright  	Copyright (c) 2013, E.z	 * @author     	E.z <ezgoen@gmail.com>	 */	public function set_fish_args($params=array()){		$valid_args=array(  //    see http://users.tpg.com.au/j_birch/plugins/superfish/#options							//		'hoverClass',		//    'sfHover',          // the class applied to hovered list items		'pathClass',		//    'overideThisToUse', // the class you have applied to list items that lead to the current page		'pathLevels',		//    1,                  // the number of levels of submenus that remain open or are restored using pathClass		'delay',			//    800,                // the delay in milliseconds that the mouse can remain outside a submenu without it closing		'animation',		//    {opacity:'show'},   // an object equivalent to first parameter of jQuery’s .animate() method. Used to animate the submenu open		'animationOut',		//    {opacity':'hide'},  // an object equivalent to first parameter of jQuery’s .animate() method Used to animate the submenu closed		'speed',			//    'normal',           // speed of the opening animation. Equivalent to second parameter of jQuery’s .animate() method		'speedOut',			//    'fast',             // speed of the closing animation. Equivalent to second parameter of jQuery’s .animate() method		'autoArrows',		//    true,               // if true, arrow mark-up generated automatically = cleaner source code at expense of initialisation performance		'disableHI',		//    false,              // set to true to disable hoverIntent detection		'useClick',			//    false,              // set this to true to require a click to open and close submenus. Note that the link will never be followed when in this mode		'onInit',			//    $.noop,             // callback function fires once Superfish is initialised – 'this' is the containing ul		'onBeforeShow',		//    $.noop,             // callback function fires just before reveal animation begins – 'this' is the ul about to open		'onShow',			//    $.noop,             // callback function fires once reveal animation completed – 'this' is the opened ul		'onBeforeHide',		//    $.noop,             // callback function fires just before closing animation – 'this' is the ul about to close		'onHide',			//    $.noop,             // callback function fires after a submenu has closed – 'this' is the ul that just closed		'onIdle');			//    $.noop              // callback function fires when the 'current' submenu is restored (if using pathClass functionality)				$string_args=array('hoverClass','pathClass','speed','speedOut');						$fish_args="";		$i=0;		foreach($params as $key=>$value){			$new_args='';			if (in_array($key,$valid_args)){				$i+=1;				$value = (in_array($key,$string_args)) ? "'{$value}'" : $value;				$new_args="$key: $value";				$fish_args .= ($fish_args!='' ) ? ",\n\t\t\t\t".$new_args : $new_args;			}		}		$fish_args=($i > 0) ? "{\n\t\t\t\t$fish_args\n\t\t\t}" : "";						$fish_js  ='';		$fish_js .="\n\t\tjQuery(document).ready(function(){";		$fish_js .="\n\t\t\tjQuery('{$this->container_tag}.{$this->container_tag_class}').superfish(".$fish_args.");";		$fish_js .="\n\t\t});";		$this->_add_inline_js($fish_js);		return $fish_js;	}			 /**     * set_menu_item	 *	 * This is the public interface  Use this to add menu items	 *     * @param $link    		This is the url link you want  - we prepend codeigniters site_url     * @param $path			This is the visual representation of the path - 	 *                      the menu will be built with this heirarchy	 * @param $active		This is the link to the currently displayed location	 *						we use this to mark the 'selected' menu item	 * @param $attributes	Any other additional attributes you or your stylist ;)  might want 	 *	 * @example				:	 *	 *						 $active_item=$this->uri->uri_string();	 *						 //		OR	 *						 $active_item=$_SERVER['REQUEST_URI'];	 *						 $SuperFish->set_menu_item('home','Home',$active_item);	 *						 $SuperFish->set_menu_item('admin/usr_accounts','Administrative Tasks/Manage User Accounts',$active_item);	 *						 $SuperFish->set_menu_item('admin/site_man','Administrative Tasks/Site Management',$active_item);	 *	 *						will render :	 *								 *						<!-- Start SuperFish Menu  //-->	 *						<ul id="nav" class="sf-menu">	 *							<li><a href="http://testing/index.php/home" title="Home">Home</a></li>	 *							<li>	 *								<a href="#" title="Administrative Tasks" >Administrative Tasks</a>	 *								<ul>	 *									<li><a href="http://testing/index.php/admin/usr_accounts" title="Manage User Accounts">Manage User Accounts</a></li>	 *									<li><a href="http://testing/index.php/admin/site_man" title="Site Management">Site Management</a></li>	 *								</ul>	 *							</li>	 *						</ul>	 *						<!-- End SuperFish Menu  //-->	 *	 * @package    	PHP Superfish	 * @copyright  	Copyright (c) 2013, E.z	 * @author     	E.z <ezgoen@gmail.com>	 *     */	public function set_menu_item($link,$path,$active=null,$attributes=null){		$class= (!is_null($active) and $active==$link) ? ' class="current"' : '';		$attrs='';		if (is_array($attributes)){			foreach ($attributes as $k => $v){				$attrs.=" {$k}=\"${v}\"";			}		}		$link=site_url($link);		$data=array($path=>"<li{$class}><a href=\"{$link}\" title=\"%s\"{$attrs}>%s</a></li>");		$this->setNodes($data,'/');	}	/**	 * render	 *	 * This returns the $this->menu_data array that you will print components of in your template	 *	 * @package    	PHP Superfish	 * @copyright  	Copyright (c) 2013, E.z	 * @author     	E.z <ezgoen@gmail.com>	 */	 public function render(){				$result = $this->prepare();		$this->menu_data->output=$result;		$result = $this->menu_data;		$result->includes->inline=$this->inline();		return $result;	}		 /**	 * setNodes - Builds a heirarchial array for the menu	 *     * Sets key/value pairs at any depth on an array.     * @param $data an array of key/value pairs to be added/modified     * @param $array the array to operate on	 *	 * Borrowed from a User Contributed Note for array_walk_recursive 	 * (http://php.net/manual/de/function.array-walk-recursive.php)	 * by cyranix at cyranix dot com	 *	 * @package    	PHP Superfish	 * @version    	1.0	 *      */    private function setNodes($data, $sep='/') {        $separator = $sep; // set this to any string that won't occur in your keys        foreach ($data as $name => $value) {            if (strpos($name, $separator) === false) {                // If the array doesn't contain a special separator character, just set the key/value pair.                // If $value is an array, you will of course set nested key/value pairs just fine.				$name=ucwords(strtolower($name));				$this->active_path[$name]= (strpos($value, 'current') !== false) ? ' class="current"' : '';				$this->menu_data->build[$name] = sprintf($value,$name,$name);            } else {                // In this case we're trying to target a specific nested node without overwriting any other siblings/ancestors.                // The node or its ancestors may not exist yet.                $keys = explode($separator, $name);                // Set the root of the tree.                $opt_tree =& $this->menu_data->build;                // Start traversing the tree using the specified keys.                while ($key = array_shift($keys)) {					$key=ucwords(strtolower($key));					$this->active_path[$key]= (strpos($value, 'current') !== false) ? ' class="current"' : '';                    // If there are more keys after the current one...                    if ($keys) {                        if (!isset($opt_tree[$key]) || !is_array($opt_tree[$key])) {                            // Create this node if it doesn't already exist.                            $opt_tree[$key] = array();                        }                        // Redefine the "root" of the tree to this node (assign by reference) then process the next key.                        $opt_tree =& $opt_tree[$key];                    } else {                        // This is the last key to check, so assign the value.						$opt_tree[$key] = $value=sprintf($value,$key,$key);                    }                }            }        }    }	/**     * The "Real" Build process 	 * 	 * Called by Render	 *	 * @package    	PHP Superfish	 * @copyright  	Copyright (c) 2013, E.z	 * @author     	E.z <ezgoen@gmail.com>	 *     */	private function prepare(){		$this->tmp_build='';		$this->tmp_build=PHP_EOL."<!-- Start SuperFish Menu  //-->"; //you can take this out or comment it out - its just to help you find the output		$this->tmp_build .=PHP_EOL;		$this->tmp_build .= (!empty($this->container_tag)) ? "<".$this->container_tag.$this->container_tag_attrs : '';		$this->tmp_build .= (!empty($this->container_tag_id) ) ? " id=\"".$this->container_tag_id."\"" :'';		$this->tmp_build .= (!empty($this->container_tag_class)) ? " class=\"".$this->container_tag_class."\"" : '';		$this->tmp_build .= (!empty($this->container_tag)) ? ">" : '';							$iterator = new RecursiveArrayIterator($this->menu_data->build);		$this->depth=0;		$depth=0;		iterator_apply($iterator, array($this,'buildMenu'), array($iterator,$depth));		$this->tmp_build .= (!empty($this->container_tag)) ? PHP_EOL."</".$this->container_tag.">" : '';		$this->tmp_build .=PHP_EOL."<!-- End SuperFish Menu  //-->".PHP_EOL;		//you can take this out or comment it out - its just to help you find the output		return $this->tmp_build;	}	 /**     * The "Real" Build process 	 * 	 * Called by Render	 *	 * @package    	PHP Superfish	 * @copyright  	Copyright (c) 2013, E.z	 * @author     	E.z <ezgoen@gmail.com>	 *     */	function buildMenu($iterator,$depth) {	   $this->depth+=1;	   $depth+=1;		while ( $iterator -> valid() ) {			if ( $iterator -> hasChildren() ) {				$name=$iterator -> key();				if (isset($this->active_path[$name])){					$class=$this->active_path[$name];					$this->tmp_build.=PHP_EOL.str_repeat("\t", $depth)."<li{$class}>";					$this->tmp_build.=PHP_EOL.str_repeat("\t", $depth+1)."<a href=\"#\" title=\"{$name}\" >{$name}</a>";				}			   $this->tmp_build.=PHP_EOL.str_repeat("\t", $depth +1)."<ul>";			   $this->buildMenu($iterator -> getChildren(),$depth+1);			   $this->tmp_build.=PHP_EOL.str_repeat("\t", $depth+1)."</ul>";			   if (isset($this->active_path[$name])){					$this->tmp_build.=PHP_EOL.str_repeat("\t", $depth)."</li>";			   }			} else {				$this->tmp_build.=PHP_EOL.str_repeat("\t", $depth ).$iterator -> current() ;			}			$iterator -> next();		}	} 			 /**     * Render To Crud	 * 	 * Helper - pass the crud output into this and it 	 * will render merge the menu with the crud output	 * returns the crud output	 *	 * Calls by Render	 *	 * @package    	PHP Superfish	 * @copyright  	Copyright (c) 2013, E.z	 * @author     	E.z <ezgoen@gmail.com>	 *     */	public function renderToCrud($crud_output){		$menu = $this->render();				//$grocerycrud includes = 		$js_files=$crud_output->js_files;		$css_files=$crud_output->css_files;				//merge our includes 		$arr=$menu->includes->css_files;		foreach ($arr as $key => $value){			$css_files[$key]=$value;		}		$arr=$menu->includes->js_files;		foreach ($arr as $key => $value){			$js_files[$key]=$value;		}		$crud_output->inline.=$menu->includes->inline;		$crud_output->js_files=$js_files;		$crud_output->css_files=$css_files;				$crud_output->menu=$menu->output;				return $crud_output;	}			// These are pretty self explanitory - include and inline css & jss helper functions	private function _get_inline_css(){		return (trim($this->inline_css) != "") ? "<!--Superfish Menu //-->\n<style type=\"text/css\">{$this->inline_css}\n</style>\n" :"";	}	private function _get_inline_js(){		return (trim($this->inline_js) != "") ? "<!--Superfish Menu //-->\n<script type=\"text/javascript\">{$this->inline_js}\n</script>\n" : "";	}	private function inline(){		return $this->_get_inline_css() .$this->_get_inline_js();	}	private function set_css($css){		$this->menu_data->includes->css_files[sha1($css)]=base_url().$css;	}	private function set_js($js){		$this->menu_data->includes->js_files[sha1($js)]=base_url().$js;	}	private function _add_inline_js($inline_js = ''){		$this->inline_js .= (trim($inline_js) != "") ? "\n{$inline_js}" : "" ;	}	private function _add_js_vars($js_vars = array()){		$result = "";		foreach ($js_vars as $js_var => $js_value) {			$result.= "\tvar $js_var = '$js_value';\n";		}		$result = (trim($result) != '') ? "{$result}\n" : "";		$this->inline_js($result);	}	}